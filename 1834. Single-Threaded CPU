class Compare {
    public:
    bool operator() (vector<int>& a, vector<int>& b) {
        if (a[1] == b[1]) {
            return a[2] > b[2];
        }
        return a[1] > b[1];
    }
};
class Solution {
public:
    vector<int> getOrder(vector<vector<int>>& tasks) {
        int N = tasks.size();
        for (int i=0; i<N; i++) {
            tasks[i].push_back(i);
        }
        sort(tasks.begin(), tasks.end());
        priority_queue<vector<int>, vector<vector<int>>, Compare> tasksQueue;
        vector<int> ans;
        int i = 0;
        long long curTime = tasks[i][0];
        while (true) {
            while (i<N && tasks[i][0] <= curTime) {
                tasksQueue.push(tasks[i]);
                i++;
            }
            if (tasksQueue.empty()) {
                if (i >= N) break;
                curTime = tasks[i][0];
                continue;
            }
            vector<int> curTask = tasksQueue.top();
            tasksQueue.pop();
            ans.push_back(curTask[2]);
            curTime = curTime += curTask[1];
        }
        return ans;
    }
};
// December 29, 2022
