class Solution {
public:
    int helper(int index, vector<vector<int>>& events, int k, vector<vector<int>>& dp) {
        if (index >= events.size() || k <= 0) return 0;
        if (dp[index][k] == -1) {
            int curValue1 = helper(index+1, events, k, dp);
            int tempIndex = -1;
            for (int i=index+1; i<events.size(); i++) {
                if (events[i][0] > events[index][1]) {
                    tempIndex = i;
                    break;
                }
            }
            int curValue2 = events[index][2];
            if (tempIndex != -1) {
                curValue2 += helper(tempIndex, events, k-1, dp);
            }
            dp[index][k] = max(curValue1, curValue2);
        }
        return dp[index][k];
    }
    int maxValue(vector<vector<int>>& events, int k) {
        sort(events.begin(), events.end());
        vector<vector<int>> dp(events.size(), vector<int>(k+1, -1));
        return helper(0, events, k, dp);
    }
};

// July 15, 2023
