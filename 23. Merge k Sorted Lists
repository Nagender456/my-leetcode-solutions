class Solution {
public:
    ListNode* mergeTwo(ListNode*list1, ListNode*list2) {
        if (list1 == NULL && list2 == NULL) {
            return NULL;
        }
        ListNode* dummyHead = new ListNode();
        ListNode* tail = dummyHead;
        while (list1 != NULL && list2 != NULL) {
            if (list1->val > list2->val) {
                tail->next = new ListNode();
                tail = tail->next;
                tail->val = list2->val;
                list2 = list2->next;
            }
            else {
                tail->next = new ListNode();
                tail = tail->next;
                tail->val = list1->val;
                list1 = list1->next;
            }
        }
        if (list1 == NULL) {
            tail->next = list2;
        }
        if (list2 == NULL) {
            tail->next = list1;
        }
        return dummyHead->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* mergedResult = NULL;
        vector<ListNode*> newList;
        if (lists.size() == 0) return NULL;
        while (lists.size() > 1) {
            newList = vector<ListNode*>();
            if (lists.size() % 2 == 1) {
                lists.push_back(NULL);
            }
            for (int i=0; i<lists.size(); i+=2) {
                mergedResult = mergeTwo(lists[i], lists[i+1]);
                newList.push_back(mergedResult);
            }
            lists = newList;
        }
        return lists[0];
    }
};

// 12 March, 2023
