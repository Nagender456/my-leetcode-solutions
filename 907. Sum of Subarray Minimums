class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int mod = 1000000007;
        int N = arr.size();
        vector<int> left(N);
        vector<int> right(N);
        stack<pair<int, int>> s1;
        stack<pair<int, int>> s2;
        for (int i=0; i<N; i++) {
            int count = 1;
            while (!s1.empty()) {
                pair<int, int> temp = s1.top();
                if (arr[i] < temp.first) {
                    count += temp.second;
                    s1.pop();
                }
                else {
                    break;
                }
            }
            s1.push({arr[i], count});
            left[i] = count;
        }
        for (int i=N-1; i>=0; i--) {
            int count = 1;
            while (!s2.empty()) {
                pair<int, int> temp = s2.top();
                if (arr[i] <= temp.first) {
                    count += temp.second;
                    s2.pop();
                }
                else {
                    break;
                }
            }
            s2.push({arr[i], count});
            right[i] = count;
        }
        int ans = 0;
        for (auto el: left) cout << el << ", ";
        cout << endl;
        for (auto el: right) cout << el << ", ";
        for (int i=0; i<N; i++) {
            ans = (ans + (arr[i] * left[i] * right[i])) % mod;
        }
        return ans;
    }
};
// November 25, 2022
