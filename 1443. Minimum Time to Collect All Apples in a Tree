class Solution {
public:
    int solve(int i, vector<bool> &visited, vector<vector<int>>& neighbor, vector<bool>& hasApple) {
        if (visited[i]) return 0;
        visited[i] = true;
        int curAns = 0;
        for (auto node: neighbor[i]) {
            curAns += solve(node, visited, neighbor, hasApple);
        }
        visited[i] = false;
        if (curAns <= 0) {
            if (hasApple[i] && i != 0) return 2;
            else return 0;
        }
        return i == 0? curAns: curAns + 2;
    }
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        vector<vector<int>> neighbor = vector<vector<int>>(n, vector<int>());
        vector<bool> visited(n, false);
        for (auto edge: edges) {
            neighbor[edge[0]].push_back(edge[1]);
            neighbor[edge[1]].push_back(edge[0]);
        }
        return solve(0, visited, neighbor, hasApple);
    }
};
// January 11, 2023
